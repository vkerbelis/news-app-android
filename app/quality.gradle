apply plugin: 'cpd'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
check.dependsOn 'checkstyle', 'pmdMain', 'pmdTest', 'findbugsXml', 'findbugsHtml'
checkstyle {
    toolVersion = '7.3'
}
pmd {
    toolVersion = '5.5.1'
}
jacoco {
    toolVersion = "0.7.7.201606060606"
    reportsDir = file("$buildDir/reports/jacoco")
}
cpdCheck {
    minimumTokenCount = 75
    ignoreFailures = true
    source = files('src/main/java')
}
task checkstyle(type: Checkstyle) {
    group = 'verification'
    ignoreFailures = true
    configFile file('config/checkstyle/checkstyle.xml')
    source = files('src/main/java', 'src/test/java')
    classpath = files()
}
task pmdMain(type: Pmd) {
    group = 'verification'
    ignoreFailures = true
    ruleSetFiles = files('config/pmd/main-rules.xml')
    source = files('src/main/java')
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
task pmdTest(type: Pmd) {
    group = 'verification'
    ignoreFailures = true
    ruleSetFiles = files('config/pmd/test-rules.xml');
    source = files('src/test/java')
    reports {
        xml.enabled = true
        xml.destination = "$project.buildDir/reports/pmd/test.xml"
        html.enabled = true
        html.destination = "$project.buildDir/reports/pmd/test.html"
    }
}
task findbugsXml(type: FindBugs) {
    group = 'verification'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = new File('config/findbugs/findbugs-filter.xml')
    classes = files("$project.buildDir/intermediates/classes/")
    source = files('src/main/java')
    reports {
        xml.enabled = true
        xml.destination = "$project.buildDir/reports/findbugs/findbugs.xml"
        html.enabled = false
        html.destination "$project.buildDir/reports/findbugs/findbugs.html"
    }
    classpath = files()
}
task findbugsHtml(type: FindBugs) {
    group = 'verification'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = new File('config/findbugs/findbugs-filter.xml')
    classes = files("$project.buildDir/intermediates/classes/")
    source = files('src/main/java')
    reports {
        xml.enabled = false
        xml.destination = "$project.buildDir/reports/findbugs/findbugs.xml"
        html.enabled = true
        html.destination "$project.buildDir/reports/findbugs/findbugs.html"
    }
    classpath = files()
}
android.buildTypes.all { buildType ->
    task("${buildType.name}JacocoReport", type: JacocoReport,
            dependsOn: "test${buildType.name.capitalize()}UnitTest") {
        group = "verification"
        classDirectories = fileTree(
                dir: "${project.buildDir}/intermediates/classes/${buildType.name}/",
                excludes: ['**/R*', '**/R$.class', '**/*$ViewBinder*.*', '**/*$ViewInjector*.*',
                           '**/BuildConfig.*', '**/Manifest*.*', '**/*_*', '**/Dagger*']
        )
        sourceDirectories = files("src/main/java", "src/${buildType.name}/java", "src/test/java")
        executionData =
                files("${project.buildDir}/jacoco/test${buildType.name.capitalize()}UnitTest.exec")
        reports {
            xml.enabled true
            html.enabled true
            html.destination "${buildDir}/reports/jacoco"
        }
    }
}
// The built-in jacoco plugin automatically applies itself to all Test tasks
tasks.withType(Test).whenTaskAdded {
    it.jacoco.append = true
    it.jacoco.classDumpFile = file("$project.buildDir/jacoco/dump")
}